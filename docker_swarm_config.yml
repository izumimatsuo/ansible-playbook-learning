---
- name: docker swarm configuration
  hosts: all
  become: true
  gather_facts: false

  vars:
    docker_swarm_manager_count: 3
    docker_swarm_manager_hosts: "{{ (ansible_play_hosts | sort)[:docker_swarm_manager_count] }}"
    docker_swarm_leader_host: "{{ docker_swarm_manager_hosts | first }}"
    docker_swarm_advertise_addr: "eth1"

  pre_tasks:
    - name: fetch pip installer
      ansible.builtin.uri:
        url: https://bootstrap.pypa.io/pip/2.7/get-pip.py
        return_content: true
      register: pip_installer

    - name: run pip installer
      ansible.builtin.command:
        cmd: python
        stdin: "{{ pip_installer.content }}"
      args:
        creates: /usr/bin/pip

    - name: install docker python package
      ansible.builtin.pip:
        name:
          - docker

  tasks:
    - name: set docker-swarm manager as fact
      ansible.builtin.set_fact:
        docker_swarm_manager: "{{ true if inventory_hostname in docker_swarm_manager_hosts else false }}"

    - name: init docker-swarm cluster
      when: inventory_hostname == docker_swarm_leader_host
      community.docker.docker_swarm:
        state: present
        advertise_addr: "{{ docker_swarm_advertise_addr }}"

    - name: join docker-swarm cluster
      when: inventory_hostname != docker_swarm_leader_host
      block:
        - name: get docker-swarm join token
          ansible.builtin.shell:
            cmd: set -o pipefail; docker swarm join-token {{ 'manager' if docker_swarm_manager else 'worker' }} | grep -o 'docker swarm join .*$'
          delegate_to: "{{ docker_swarm_leader_host }}"
          delegate_facts: true
          changed_when: false
          register: docker_swarm_join_command

        - name: join docker-swarm cluster
          community.docker.docker_swarm:
            state: join
            advertise_addr: "{{ docker_swarm_advertise_addr }}"
            join_token: "{{ docker_swarm_join_command.stdout.split(' ')[4] }}"
            remote_addrs: ["{{ docker_swarm_join_command.stdout.split(' ')[5] }}"]

  post_tasks:
    - name: verify docker-swarm is active
      ansible.builtin.command:
        cmd: docker info
      changed_when: false
      register: result
      failed_when: "'Swarm: active' not in result.stdout"

    - name: verify docker-swarm-manager
      when: docker_swarm_manager
      ansible.builtin.command:
        cmd: docker node ls
      changed_when: false
      register: result
      failed_when: result.rc != 0

    - name: print docker-swarm-nodes
      when: inventory_hostname == docker_swarm_leader_host
      ansible.builtin.debug:
        var: result.stdout_lines
