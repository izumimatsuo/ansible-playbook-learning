---
- name: rundeck container deploy
  hosts: all
  become: true
  gather_facts: false

  vars:
    rundeck_use_mailcatcher: true
    rundeck_grails_url: "http://127.0.0.1:4440"
    rundeck_container_image: "rundeck/rundeck"
    postgresql_container_image: "postgres"

  pre_tasks:
    - name: check releasever
      ansible.builtin.shell:
        cmd: cat /etc/os-release | grep VERSION_ID | sed -e 's/.*"\(.*\)"/\1/'
      changed_when: false
      failed_when: false
      register: result

    - name: set releasever as fact
      ansible.builtin.set_fact:
        releasever: "{{ result.stdout[0] }}"

    - name: install python-pip packages
      when: releasever != "7"
      ansible.builtin.yum:
        name:
          - python3-pip

    - name: install python-pip (python2)
      when: releasever == "7"
      block:
        - name: fetch pip installer
          ansible.builtin.uri:
            url: https://bootstrap.pypa.io/pip/2.7/get-pip.py
            return_content: true
          register: pip_installer

        - name: run pip installer
          ansible.builtin.command:
            cmd: python
            stdin: "{{ pip_installer.content }}"
          args:
            creates: /usr/bin/pip

    - name: get latest release
      when: rundeck_container_image == "rundeck/rundeck"
      delegate_to: localhost
      run_once: true
      become: false
      block:
        - name: get rundeck latest version
          ansible.builtin.uri:
            url: "https://api.github.com/repos/rundeck/rundeck/releases/latest"
            method: GET
            return_content: true
            status_code: 200
            body_format: json
          register: latest_release
          until: latest_release.status == 200
          retries: 5

        - name: set rundeck version to '{{ latest_release.json.tag_name[1:] }}'
          ansible.builtin.set_fact:
            rundeck_container_image: "{{ rundeck_container_image }}:{{ latest_release.json.tag_name[1:] }}"

  tasks:
    - name: install docker python package
      ansible.builtin.pip:
        name:
          - docker
          - docker-compose

    - name: create conf directory
      ansible.builtin.file:
        path: /etc/rundeck
        state: directory
        owner: root
        group: root
        mode: '0744'

    - name: copy docker-compose file
      ansible.builtin.copy:
        backup: true
        dest: /etc/rundeck/docker-compose.yml
        content: |
          version: '3'

          services:
            rundeck:
              image: "{{ rundeck_container_image }}"
              container_name: rundeck
              environment:
                RUNDECK_DATABASE_DRIVER: org.postgresql.Driver
                RUNDECK_DATABASE_USERNAME: rundeck
                RUNDECK_DATABASE_PASSWORD: rundeck
                RUNDECK_DATABASE_URL: jdbc:postgresql://rdb/rundeck
                RUNDECK_GRAILS_URL: "{{ rundeck_grails_url }}"
                RUNDECK_MAIL_SMTP_HOST: mail
                RUNDECK_MAIL_SMTP_PORT: 1025
                RUNDECK_MAIL_FROM: notifier@mail.example.com
              volumes:
                - ${RUNDECK_LICENSE_FILE:-/dev/null}:/home/rundeck/etc/rundeckpro-license.key
                - /etc/rundeck/targets:/home/rundeck/targets
              networks:
                - automation
              ports:
                - 4440:4440

            rdb:
              image: "{{ postgresql_container_image }}"
              container_name: rdb
              environment:
                POSTGRES_USER: rundeck
                POSTGRES_PASSWORD: rundeck
                POSTGRES_DB: rundeck
              networks:
                - automation
              volumes:
                - rundeck_database:/var/lib/postgresql/data
            {% if rundeck_use_mailcatcher %}

            mail:
              image: schickling/mailcatcher
              container_name: mail
              networks:
                - automation
              ports:
                - 1025:1025
                - 1080:1080
            {% endif %}

          volumes:
            rundeck_database:

          networks:
            automation:
              name: management_net
              external: true
        owner: root
        group: root
        mode: "0644"
      notify: restart containers

    - name: create network
      community.docker.docker_network:
        name: management_net

    - name: start containers
      community.docker.docker_compose:
        project_src: /etc/rundeck

  post_tasks:
    - name: verify started postresql contailner
      ansible.builtin.command:
        cmd: docker container ls
      changed_when: false
      register: result
      failed_when: "'postgres' not in result.stdout"

    - name: verify started rundeck contailner
      ansible.builtin.command:
        cmd: docker container ls
      changed_when: false
      register: result
      failed_when: "'rundeck/rundeck' not in result.stdout"

  handlers:
    - name: restart containers
      community.docker.docker_compose:
        project_src: /etc/rundeck
        restarted: true
