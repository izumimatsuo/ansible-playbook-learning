---
- name: nginx wargio naxsi module install
  hosts: all
  become: true
  gather_facts: false

  pre_tasks:
    - name: get installed nginx version
      ansible.builtin.shell:
        cmd: nginx -v |& grep -oP '(?<=nginx/)\S+'
      changed_when: false
      register: result
      failed_when: result.rc != 0

    - name: set installed nginx version as fact
      when: result.stdout != ""
      ansible.builtin.set_fact:
        naxsi_nginx_version: "{{ result.stdout }}"

    - name: print targert version
      ansible.builtin.debug:
        var: naxsi_nginx_version

  tasks:
    - name: install additional packages
      ansible.builtin.yum:
        name:
          - wget
          - git
          - gcc
          - pcre-devel
          - openssl-devel
          - zlib-devel

    - name: get nginx source
      ansible.builtin.unarchive:
        src: https://nginx.org/download/nginx-{{ naxsi_nginx_version }}.tar.gz
        dest: /usr/local/src
        remote_src: true
      register: naxsi_nginx_source

    - name: get naxsi source
      ansible.builtin.command:
        cmd: git clone --recurse-submodules https://github.com/wargio/naxsi.git
      args:
        creates: /usr/local/src/naxsi
        chdir: /usr/local/src/
      register: naxsi_source

    - name: configure naxsi
      when: naxsi_nginx_source.changed or naxsi_source.changed # noqa: no-handler
      ansible.builtin.command:
        cmd: ./configure --with-compat --add-dynamic-module=/usr/local/src/naxsi/naxsi_src
      args:
        chdir: /usr/local/src/nginx-{{ naxsi_nginx_version }}

    - name: edit c99 mode
      ansible.builtin.replace:
        path: /usr/local/src/nginx-{{ naxsi_nginx_version }}/objs/Makefile
        regexp: '^CFLAGS =\s+(-pipe.*)?$'
        replace: 'CFLAGS = -std=c99 \1'

    - name: make naxsi module
      community.general.make:
        target: modules
      args:
        chdir: /usr/local/src/nginx-{{ naxsi_nginx_version }}

    - name: copy naxsi module
      ansible.builtin.copy:
        src: /usr/local/src/nginx-{{ naxsi_nginx_version }}/objs/ngx_http_naxsi_module.so
        dest: /etc/nginx/modules
        remote_src: true
        setype: lib_t
        mode: "0644"

    - name: copy naxsi_core.rules
      ansible.builtin.copy:
        src: /usr/local/src/naxsi/naxsi_rules/naxsi_core.rules
        dest: /etc/nginx/
        remote_src: true
        mode: "0644"

    - name: load naxsi module
      ansible.builtin.lineinfile:
        path: /etc/nginx/nginx.conf
        insertafter: '^worker_processes'
        line: "load_module modules/ngx_http_naxsi_module.so;"
        backup: true
        validate: '/usr/sbin/nginx -t -c %s'
      notify: restart nginx service

    - name: load naxsi configuration
      ansible.builtin.copy:
        dest: /etc/nginx/conf.d/default.conf
        content: |
          include /etc/nginx/naxsi_core.rules;

          server {
              listen       80;
              server_name  localhost;

              location / {
                  root   /usr/share/nginx/html;
                  index  index.html index.htm;

                  SecRulesEnabled;
                  #LearningMode;
                  LibInjectionSql;
                  LibInjectionXss;

                  DeniedUrl "/RequestDenied";
                  CheckRule "$SQL >= 8" BLOCK;
                  CheckRule "$RFI >= 8" BLOCK;
                  CheckRule "$TRAVERSAL >= 5" BLOCK;
                  CheckRule "$EVADE >= 5" BLOCK;
                  CheckRule "$XSS >= 8" BLOCK;

                  error_log /var/log/naxsi.log;
              }

              location /RequestDenied {
                  internal;
                  return 403;
              }

              error_page   500 502 503 504  /50x.html;
              location = /50x.html {
                  root   /usr/share/nginx/html;
              }
          }
        backup: true
        mode: "0644"
      notify: restart nginx service

  post_tasks:
    - name: verify access (200) to uri 'http://localhost'
      ansible.builtin.uri:
        url: "http://localhost"
        status_code: 200

    - name: verify not access (403) to uri 'http://localhost/?param=<script>'
      ansible.builtin.uri:
        url: "http://localhost/?param=<script>"
        status_code: 403

  handlers:
    - name: restart nginx service
      ansible.builtin.service:
        name: nginx
        state: restarted
