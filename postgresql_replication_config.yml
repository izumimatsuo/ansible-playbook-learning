---
- name: postgresql cluster configuration
  hosts: all
  become: true
  gather_facts: false

  vars:
    pgsql_version: "15"
    pgsql_replication_master: "{{ ansible_play_hosts | sort | first }}"

  tasks:
    - name: setup replication master node
      when: inventory_hostname == pgsql_replication_master
      block:
        - name: edit postgresql.conf
          ansible.builtin.blockinfile:
            path: "/var/lib/pgsql/{{ pgsql_version }}/data/postgresql.conf"
            backup: true
            block: |
              listen_addresses = '*'
              wal_level = replica
              synchronous_commit = on
              max_wal_senders = 10
              synchronous_standby_names = '*'
          register: postgresql_conf

        - name: edit pg_hba.conf
          ansible.builtin.lineinfile:
            path: "/var/lib/pgsql/{{ pgsql_version }}/data/pg_hba.conf"
            backup: true
            regexp: "^host replication postgres all trust"
            line: "host replication postgres all trust"
          register: pg_hba_conf

        - name: restart postgresql service
          when: postgresql_conf.changed or pg_hba_conf.changed
          ansible.builtin.service:
            name: "postgresql-{{ pgsql_version }}.service"
            state: restarted

    - name: check replication started
      when: inventory_hostname != pgsql_replication_master
      ansible.builtin.stat:
        path: "/var/lib/pgsql/{{ pgsql_version }}/data/standby.signal"
      register: standby_signal

    - name: setup replication slave node
      when: inventory_hostname != pgsql_replication_master and not standby_signal.stat.exists
      block:
        - name: stop postgresql service
          ansible.builtin.service:
            name: "postgresql-{{ pgsql_version }}.service"
            state: stopped

        - name: reset postgresql data directory
          ansible.builtin.file:
            path: "/var/lib/pgsql/{{ pgsql_version }}/data"
            state: absent

        - name: sync database
          become_user: postgres
          ansible.builtin.command:
            cmd: pg_basebackup -R -D /var/lib/pgsql/{{ pgsql_version }}/data/ -h {{ pgsql_replication_master }}
          register: result
          changed_when: result == 0

        - name: start postgresql service
          ansible.builtin.service:
            name: "postgresql-{{ pgsql_version }}.service"
            state: started

  post_tasks:
    - name: verify postgresql config
      when: inventory_hostname == pgsql_replication_master
      ansible.builtin.wait_for:
        path: "/var/lib/pgsql/{{ pgsql_version }}/data/postgresql.conf"
        search_regex: "^{{ item }}$"
        state: present
        timeout: 5
      loop:
        - listen_addresses = '\*'
        - wal_level = replica
        - synchronous_commit = on
        - max_wal_senders = 10
        - synchronous_standby_names = '\*'

    - name: verify pg_hba config
      when: inventory_hostname == pgsql_replication_master
      ansible.builtin.wait_for:
        path: "/var/lib/pgsql/{{ pgsql_version }}/data/pg_hba.conf"
        search_regex: "^{{ item }}$"
        state: present
        timeout: 5
      loop:
        - host replication postgres all trust

    - name: verify replication started
      when: inventory_hostname != pgsql_replication_master
      ansible.builtin.stat:
        path: "/var/lib/pgsql/{{ pgsql_version }}/data/standby.signal"
      register: standby_signal
      failed_when: not standby_signal.stat.exists
