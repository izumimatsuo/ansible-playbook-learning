---
- name: postgresql setup
  hosts: all
  become: true
  gather_facts: false

  vars:
    pgsql_version: "15"

  pre_tasks:
    - name: update ca-certificates  # noqa package-latest
      ansible.builtin.yum:
        name: ca-certificates
        state: latest

          #    - name: update rpm-gpg-key
          #      ansible.builtin.rpm_key:
          #        key: https://download.postgresql.org/pub/repos/yum/keys/RPM-GPG-KEY-PGDG

    - name: check releasever
      ansible.builtin.shell:
        cmd: cat /etc/os-release | grep VERSION_ID | sed -e 's/.*"\(.*\)"/\1/'
      changed_when: false
      failed_when: false
      register: result

    - name: set releasever as fact
      ansible.builtin.set_fact:
        releasever: "{{ result.stdout[0] }}"

  tasks:
    - name: add postgresql repository
      ansible.builtin.yum:
        name: "https://download.postgresql.org/pub/repos/yum/reporpms/EL-{{ releasever }}-x86_64/pgdg-redhat-repo-latest.noarch.rpm"
        disable_gpg_check: true

    - name: disabled default module
      when: releasever != "7"
      block:
        - name: check default module
          ansible.builtin.command:
            cmd: dnf -y module list --disabled postgresql
          changed_when: false
          failed_when: false
          register: result

        - name: disable default module
          when: result.rc != 0
          ansible.builtin.command:
            cmd: dnf -y module disable postgresql

    - name: set major version as fact
      ansible.builtin.set_fact:
        pgsql_major_version: "{{ pgsql_version.split('.')[0] }}"

    - name: install postgresql package
      ansible.builtin.yum:
        name: "postgresql{{ pgsql_major_version }}-server{{ '' if '.' not in pgsql_version else '-' + pgsql_version }}"

    - name: initialize database cluster
      ansible.builtin.command:
        cmd: "postgresql-{{ pgsql_major_version }}-setup initdb"
        creates: "/var/lib/pgsql/{{ pgsql_major_version }}/data/PG_VERSION"

    - name: start postgresql service
      ansible.builtin.service:
        name: "postgresql-{{ pgsql_major_version }}.service"
        state: started
        enabled: true

  post_tasks:
    - name: verify installed postgresql package
      ansible.builtin.shell:
        cmd: set -o pipefail; yum list installed | grep postgresql{{ pgsql_major_version }}-server\\.
      changed_when: false
      register: result
      failed_when: result.rc != 0

    - name: print installed version
      ansible.builtin.debug:
        var: result.stdout

    - name: verify started postgresql
      ansible.builtin.service:
        name: "postgresql-{{ pgsql_major_version }}.service"
        state: started
        enabled: true
      check_mode: true
      register: result
      failed_when: result.changed
